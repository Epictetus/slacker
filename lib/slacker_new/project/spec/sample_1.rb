# describe opens up an example group
describe 'My database' do
  # Simple example which demonstrates inline query against the database
  it 'contains system tables' do
    # Select all system objects in the database
    # Whe should have at least one of those
    query_result = query("select * from sysobjects where xtype = 'S';")
    query_result.count.should > 0
  end

  # The same query, this time using a SQL template
  # See file sql/sample_1/sysobject.sql.erb
  it 'contains system tables (take two)' do
    # Every sub-folder of the sql folder appears as an sql object
    # and every *.sql.erb file within sql or an sql subfolder appears as a method of this object
    # At the root of all sql objects is the sql folder accessible through the "sql" object
    query_result = sql.sample_1.sysobjects
    query_result.count.should > 0
  end

  # This time we'll use a parameterized template
  # See file sql/sample_1/sysobject_with_params.sql.erb
  it 'contains system tables (take three)' do
    # Every file with extension .sql.erb located in the sql folder, becomes a method of object sql
    query_result = sql.sample_1.sysobjects_with_params(:xtype => 'S')
    query_result.count.should > 0
  end

  # Let's create a table and count our user objects which match this table name
  # We should get one
  it 'contains a user table when one is created' do
    # Use inline query to create the table
    query('create table MyTable(id int, name varchar(100));')

    # Now lookup the table by type and name using a more elaborate dynamic SQL template
    # See template sql/sample_1/sysobject_with_params_2.sql.erb
    query_result = sql.sample_1.sysobjects_with_params_2(:xtype => 'U', :name => 'MyTable')
    query_result.count.should == 1
  end

  # SQL Templates can contain multiple statements and can return multiple resultsets
  it 'can play with numbers' do
    # Note that we're calling the template with a block
    # When called with a block, a template is executed and its result is accessible
    # from within the block through the "results" object
    sql.sample_1.play_with_numbers(:x => 2, :y => 12) do
      # The results object contains an array of all the resultsets generated by the query script
      first_resultset = results[0]

      # A resultset contains an array of records
      # Each record is a hash of field => value pairs
      first_resultset[0][:product].should == 24

      # A resultset can be matched directly against an array of hashes
      second_resultset = results[1]
      second_resultset.should match([{:x => 2, :y => 12, :sum => 14}])

      # Of course this works too
      results[1].should match([{:x => 2, :y => 12, :sum => 14}])

      # Or a resultset's values can be matched one-by-one
      # Note that this resultset contains two records
      third_resultset = results[2]
      third_resultset[0][:p].should == 2
      third_resultset[0][:s].should == 34
      third_resultset[1][:p].should == 12
      third_resultset[1][:s].should == 44
    end
  end
end
